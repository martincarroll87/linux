#!/bin/bash
cat > mytemp <<'EOF'
#!/bin/bash
# --------------------------------------------------------------------------
# a system monitoring script for pi based systems #
# busybox compatible per openelec
#
# origninally from a python pi script;
# requires : vcgencmd
#
# --------------------------------------------------------------------------
# ------------------------------------
usage() {
  echo ''
  echo "usage: $0 [-i num] [all]"
  echo '    -i   : set interval to run, in seconds'
  echo '    all  : show all sensors'
  echo ''
  exit 1;
}
# --------------------------------------------------------------------------
#cpu_ver=`grep model /proc/cpuinfo | head -n1 | awk -F": " '{printf $2}'`
cpu_model=$(awk -F': ' '/^model name/{printf $2; exit}' /proc/cpuinfo | sed 's/  */ /g')
cpu_num=`grep -c ^processor /proc/cpuinfo`
cpu_gov=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor`
mem_sys=`vcgencmd get_mem arm | awk -F= '{printf("%.0f",$2)}'`
mem_gpu=`vcgencmd get_mem gpu | awk -F= '{printf("%.0f",$2)}'`
#
#cpu_min=`awk '{printf("%.0f",$1/1000)}' /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq`
cpu_min=`vcgencmd get_config arm_freq_min | awk -F= '{printf("%.0f",$2)}'`
gpu_min=`vcgencmd get_config core_freq_min | awk -F= '{printf("%.0f",$2)}'`
mem_min=`vcgencmd get_config sdram_freq_min | awk -F= '{printf("%.0f", $2)}'`
#
#cpu_max=`awk '{printf("%.0f",$1/1000)}' /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq`
cpu_max=`vcgencmd get_config arm_freq | awk -F= '{printf("%.0f",$2)}'`
gpu_max=`vcgencmd get_config core_freq | awk -F= '{printf("%.0f",$2)}'`
mem_max=`vcgencmd get_config sdram_freq | awk -F= '{printf("%.0f", $2)}'`
#
sys_ver=`awk -F'"' '/^PRETTY_NAME/{printf $2;exit}' /etc/os-release `
sys_arch=`uname -r`
booted=`date -d @$(( $(date +%s) - $(cut -f1 -d. /proc/uptime) ))`
#firmware=$(`vcgencmd version | awk 'NR == 1'` `vcgencmd version | awk 'NR == 3'`)
max_temp=`vcgencmd get_config temp_limit | awk -F= '{printf("%.1f°F / %.1f°C" ,($2*1.8+32), $2)}'`
#
echo '====================------------- system info -------------===================='
echo "     cpu: ${cpu_num} x [${cpu_model}] cores available, using ${cpu_gov} governor"
echo "  memory: $(($mem_sys+$mem_gpu))MB (system: ${mem_sys}MB, gpu: ${mem_gpu}MB)"
echo '          |  arm  |  gpu  | sdram |'
printf "min freq: | %5s | %5s | %5s |\n" $cpu_min $gpu_min $mem_min
printf "max freq: | %5s | %5s | %5s |\n" $cpu_max $gpu_max $mem_max
#
echo "  system: ${sys_ver} on ${sys_arch} build"
echo "  booted: ${booted}"
echo "firmware: `vcgencmd version | awk 'NR == 1'`, `vcgencmd version | awk 'NR == 3'`"
echo "max temp: $max_temp"
echo ''

# --------------------------------------------------------------------------
# sleep between loops
# sensor poll takes ~1sec; interval=n+1
if [ "$1" == '-i' ]; then
  if ! printf "$2" | grep -q '^[0-9]'; then
  #if ! [[ "$2" =~ ^[0-9]+$ ]]; then
    echo -e "\n!!! argument for '-i' must be numeric !!!\n"
    exit 1
  fi
  interval="$2"
  shift 2
else
  interval='1'
fi

if [ "$1" == 'all' ]; then
  # sd speed #dtoverlay=sdtweak,overclock_50=84
  # gpu_mem
  #over_voltage_sdram
  tempNames()  { printf " cpu0  gpu0  cpu  gpu h264  v3d  isp  mem cpu usage  mem usage  cpu volt  sdram_c  sdram_i  sdram_p\n"; }
  tempDashes() { printf "===== ===== ==== ==== ==== ==== ==== ==== ========= =========== ======== ======== ======== ========\n"; }
  tempInfo()   { printf "`cpu_temp``gpu_temp``sys_freq arm core h264 v3d isp``mem_speed``cpu_usage``mem_usage``sys_volt core sdram_c sdram_i sdram_p`   `date`\n"; }
elif [ -n "$1" ]; then
  usage	
else
  cpu_speed() { awk '{printf("%5.0f",$1/1000)}' /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq; }
  gpu_speed() { vcgencmd measure_clock core | awk -F= '{printf("%5.0f",$2/1000000)}'; }
  #cpu_volt()  { vcgencmd measure_volts core | awk -F= '{printf("%9s", $2)}'; }
  #
  tempNames()  { printf " cpu0  gpu0  cpu  gpu  mem cpu usage  mem usage  cpu volt\n"; }
  tempDashes() { printf "===== ===== ==== ==== ==== ========= =========== ========\n"; }
  tempInfo()   { printf "`cpu_temp``gpu_temp``cpu_speed``gpu_speed``mem_speed``cpu_usage``mem_usage``sys_volt core`   `date`\n"; }
fi

#gpu mem usage
#vcdbg reloc |grep "\[" | awk '{split($0,a," "); print a[12]}' | awk '{split($0,a,","); print a[1]}' | awk '{sum+=$1}END{print sum}'

# ----------------
sys_freq() { for f in $@; do printf "%5s" "$(( $(vcgencmd measure_clock $f | awk -F= '{printf $2}') / 1000000 ))"; done; }
sys_volt() { for v in $@; do printf "%9s" "$(vcgencmd measure_volts $v | awk -F= '{printf $2}' | cut -f1 -dV)"; done; }
cpu_temp()  { awk '{printf("%5.1f",(($1*1.8)/1e3)+32)}' /sys/class/thermal/thermal_zone0/temp; }
gpu_temp()  { vcgencmd measure_temp | awk -F= '{printf("%6.1f" ,($2*1.8+32))}'; }
mem_speed() { vcgencmd get_config sdram_freq | awk -F= '{printf("%5.0f", $2)}'; }
cpu_usage() { top -n1 | awk '/CPU/{printf("%11s", $2);exit}' | sed 's/%//g'; }
mem_usage() { top -n1 | awk '/Mem\:/{printf("%5.0f/%4.0fMB", (($6/1024)+($10/1024)), (($2/1024)+($4/1024)))}'; }
#mem_usage() { top -n1 | awk '/Mem\:/{printf("%.0f/%.0fMB\n", (($2/1024)-($8/1024)-($10/1024)), (($2/1024)+($4/1024)))}'; }

echo '===============---------------------- monitor ----------------------==============='
tempNames
tempDashes
while :; do
  count=$(($count + 1));
  [[ "$(($count % 5))" == '0' ]] && tempNames
  tempInfo
  sleep $interval
done

# --------------------------------------------------------------------------

EOF

chmod +x mytemp
./mytemp
